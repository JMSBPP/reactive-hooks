{"abi":[{"type":"function","name":"msgSender","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"msgSender()":"d737d0c7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"msgSender()\":{\"details\":\"Uniswap v4 periphery contracts implement a callback pattern which lose the original msg.sender caller context. This view function provides a way for integrating contracts (e.g. hooks) to access the original caller address.\",\"returns\":{\"_0\":\"The address of the original caller\"}}},\"title\":\"IMsgSender\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"msgSender()\":{\"notice\":\"Returns the address of the original caller (msg.sender)\"}},\"notice\":\"Interface for contracts that expose the original caller\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/v4-periphery/src/interfaces/IMsgSender.sol\":\"IMsgSender\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@1inch-limit-order/=lib/limit-order-protocol/contracts/\",\":@Cyfrin/foundry-devops/=lib/foundry-devops/src/\",\":@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@reactive-network/=lib/reactive-smart-contract-demos/lib/reactive-lib/src/\",\":@uniswap/universal-router/=lib/universal-router/contracts/\",\":@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/\",\":@uniswap/v4-periphery/=lib/v4-periphery/\",\":Non-Locking-FlashLoan/=lib/Non-Locking-FlashLoan/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":foundry-devops/=lib/foundry-devops/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":hardhat/=node_modules/hardhat/\",\":limit-order-protocol/=lib/limit-order-protocol/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":permit2/=lib/v4-periphery/lib/permit2/\",\":reactive-lib/=lib/reactive-smart-contract-demos/lib/reactive-lib/src/\",\":reactive-smart-contract-demos/=lib/reactive-smart-contract-demos/src/\",\":solmate/=lib/solmate/\",\":universal-router/=lib/universal-router/\",\":v2-core/=lib/reactive-smart-contract-demos/lib/v2-core/contracts/\",\":v2-periphery/=lib/reactive-smart-contract-demos/lib/v2-periphery/contracts/\",\":v4-core/=lib/v4-periphery/lib/v4-core/src/\",\":v4-periphery/=lib/v4-periphery/\"]},\"sources\":{\"lib/v4-periphery/src/interfaces/IMsgSender.sol\":{\"keccak256\":\"0xcc7d4e3f2fde34cf1ad9f05a8e43977e04d19624f71eb8a8c295feaf64b362a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e02044b5e19cc9ca24d23f55667142fde6daefba66408b56c4f620b625fc189\",\"dweb:/ipfs/QmUqWdRBqWi2tZkNAPhzLZbknP26TZbD8iRQMd3fdZGFgi\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"msgSender","outputs":[{"internalType":"address","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"msgSender()":{"details":"Uniswap v4 periphery contracts implement a callback pattern which lose the original msg.sender caller context. This view function provides a way for integrating contracts (e.g. hooks) to access the original caller address.","returns":{"_0":"The address of the original caller"}}},"version":1},"userdoc":{"kind":"user","methods":{"msgSender()":{"notice":"Returns the address of the original caller (msg.sender)"}},"version":1}},"settings":{"remappings":["@1inch-limit-order/=lib/limit-order-protocol/contracts/","@Cyfrin/foundry-devops/=lib/foundry-devops/src/","@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/","@openzeppelin/=lib/openzeppelin-contracts/","@reactive-network/=lib/reactive-smart-contract-demos/lib/reactive-lib/src/","@uniswap/universal-router/=lib/universal-router/contracts/","@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/","@uniswap/v4-periphery/=lib/v4-periphery/","Non-Locking-FlashLoan/=lib/Non-Locking-FlashLoan/","ds-test/=lib/solmate/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","foundry-devops/=lib/foundry-devops/src/","halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","hardhat/=node_modules/hardhat/","limit-order-protocol/=lib/limit-order-protocol/contracts/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","permit2/=lib/v4-periphery/lib/permit2/","reactive-lib/=lib/reactive-smart-contract-demos/lib/reactive-lib/src/","reactive-smart-contract-demos/=lib/reactive-smart-contract-demos/src/","solmate/=lib/solmate/","universal-router/=lib/universal-router/","v2-core/=lib/reactive-smart-contract-demos/lib/v2-core/contracts/","v2-periphery/=lib/reactive-smart-contract-demos/lib/v2-periphery/contracts/","v4-core/=lib/v4-periphery/lib/v4-core/src/","v4-periphery/=lib/v4-periphery/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/v4-periphery/src/interfaces/IMsgSender.sol":"IMsgSender"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/v4-periphery/src/interfaces/IMsgSender.sol":{"keccak256":"0xcc7d4e3f2fde34cf1ad9f05a8e43977e04d19624f71eb8a8c295feaf64b362a3","urls":["bzz-raw://1e02044b5e19cc9ca24d23f55667142fde6daefba66408b56c4f620b625fc189","dweb:/ipfs/QmUqWdRBqWi2tZkNAPhzLZbknP26TZbD8iRQMd3fdZGFgi"],"license":"MIT"}},"version":1},"id":82}